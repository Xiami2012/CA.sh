[ default ]
url_base	= http://www.example.com
url_ocsp	= $url_base/ocsp
url_cacert	= $url_base/ca.crt
url_crl		= $url_base/ca.crl

# x509v3 扩展节
# 格式：extension_name = [critical, ]value
[ v3ext ]
# 基本约束(CA MUST critical)
# CA : 该证书是不是 CA 证书。[Mandatory]
# pathlen : 该证书以下可颁发多少层 CA 证书。
basicConstraints	= critical, CA:TRUE, pathlen:0
#basicConstraints	= CA:FALSE

# 密钥用法(CA MUST critical)
# 支持的值有：
#  digitalSignature: 验证非证书与 CRL 数字签名。用于身份认证、数据源认证或完整性验证等
#  nonRepudiation: 验证非证书与 CRL 数字签名。用于提供不可否认服务
#  keyEncipherment: 用于加密私钥或密钥
#  dataEncipherment: 用于直接加密原始用户数据
#  keyAgreement: 用于密钥协商
#  keyCertSign: 验证证书的数字签名。基本约束必须设置 CA:TRUE
#  cRLSign: 验证 CRL 数字签名
#  以下两个值必须同 keyAgreement 一同设定，否则行为未定义。
#  encipherOnly: 密钥协商时仅用于加密数据
#  decipherOnly: 密钥协商时仅用于解密数据
keyUsage			= critical, keyCertSign, cRLSign
#keyUsage			= digitalSignature, keyEncipherment

# 增强型密钥用法
# 与密钥用法独立，若均出现，两者均需通过检查
# 通常不出现在 CA 证书中，若出现可使用 anyExtendedKeyUsage ，若使用则 SHOULD non-critical
# 支持的值有：(冒号后为可能的相应密钥用法)
#  serverAuth(TLS 服务端认证): digitalSignature, keyEncipherment or keyAgreement
#  clientAuth(TLS 客户端认证): digitalSignature and/or keyAgreement
#  codeSigning: digitalSignature
#  emailProtection: digitalSignature, nonRepudiation, and/or (keyEncipherment or keyAgreement)
#  timeStamping: digitalSignature and/or nonRepudiation
#  OCSPSigning: digitalSignature and/or nonRepudiation
#  msCodeInd, msCodeCom, msCTLSign, msSGC, msEFS, nsSGC
# 允许使用自定义 OID
extendedKeyUsage	= anyExtendedKeyUsage
#extendedKeyUsage	= serverAuth, clientAuth

# 使用者密钥标识符(CA MUST non-critical)
# RFC3280
subjectKeyIdentifier	= hash

# 授权密钥标识符(MUST non-critical)
# keyid : 从 CA 证书复制使用者密钥标识符过来。
#  如设值为 always 则复制失败报错
# issuer : 复制 CA 证书的颁发者和序列号过来。[?]
#  仅当 keyid 复制失败或未包括时生成此字段
#  如设值为 always 则无论如何都生成此字段
authorityKeyIdentifier	= keyid, issuer:always

# 使用者可选名称
#  (如果 DN 为空，MUST critical；否则 SHOULD non-critical)
# 以下任意搭配（可重复）
# email : 特殊值 copy 意味着和 DN 中的 EMAIL 一致
# URI : 统一资源标识
# DNS : DNS 域名
# RID : 注册 ID (OID)
# IP : IP 地址
# dirName : 一个 DN 信息节
# otherName : 自定义值。格式 OID;ASN1_CONTENT
subjectAltName		= email:copy, email:i@example.com
#subjectAltName		= URI:http://www.example.com
#subjectAltName		= DNS:www.example.com
#subjectAltName		= IP:192.168.1.1
#subjectAltName		= RID:1.2.3.4
#subjectAltName		= otherName:1.2.3.4;UTF8:string
#subjectAltName		= dirName:dir_sect
#[ dir_sect ]
#C=CN
#O=Xiami Inc.
#OU=Xiami Unit
#CN=Xiami

# 颁发者可选名称(SHOULD non-critical)
# 可选值同使用者可选名称
#  除了 email:copy 不能用
# issuer:copy : 复制颁发者的使用者可选名称过来
issuerAltName		= issuer:copy

# 授权信息访问(MUST non-critical)
# 格式：OID;Location
authorityInfoAccess	= OCSP;URI:$url_ocsp, caIssuers;URI:$url_cacert

# CRL 分发点(SHOULD non-critical)
crlDistributionPoints	= URI:$url_crl
#crlDistributionPoints	= crldp1_section
#[crldp1_section]
#fullname	= URI:$url_crl
# CRLIssuer 用于 indirect CRLs
#CRLIssuer	= dirName:crlissuer_sect
#reasons		= keyCompromise, CACompromise
#[crlissuer_sect]
#C=UK
#O=Organisation
#CN=Some Name

# Issuing Distribution Point 仅出现于 CRL 中，于 ca.cnf 中定义。

# 证书策略
#  可以是单一 OID ，如果要包含 CPS 等额外信息需要额外建节。
#  如果要包含 userNotice 需要加上 ia5org 以兼容 IE5 编码。
certificatePolicies	= anyPolicy
#certificatePolicies	= ia5org, @crtpol
#[ crtpol ]
#policyIdentifier	= EV
#CPS.1				= URI:http://www.example.com
#CPS.2				= URI:http://mirror.example.com
#userNotice.1		= @notice
#[ notice ]
#explicitText		= "Explicit Text Here"
# organization 和 noticeNumbers 必须同时存在
#organization		= "Org"
#noticeNumbers		= 1,2,3,4

# 未详细了解扩展项
#policyConstraints	= requireExplicitPolicy:3
#  inhibitAnyPolicy MUST critical
#inhibitAnyPolicy	= critical, 2
#nameConstraints		= permitted;email:.example.com
# OCSP No Check
#noCheck				= ignored
# The following is which in RFC5280 but not in openssl doc
#policyMappings		=
#subjectDirectoryAttributes	=
#freshestCRL			=
#subjectInfoAccess	=

# 自定义扩展
#1.2.3.4		= critical, ASN1:UTF8String:Some random data
#1.2.3.4		= critical, DER:01:02:03:04
#1.2.3.4		= ASN1:SEQUENCE:seq_sect
#[ seq_sect ]
#field1		= UTF8:field1
#field2		= UTF8:field2

# vim: set ts=4:
